{"version":3,"sources":["file:///D:/cocos/badminton/badminton/assets/Scripts/GameManager.ts"],"names":["_decorator","Component","Animation","Node","Prefab","CCInteger","instantiate","PhysicsSystem2D","Collider2D","Contact2DType","Label","Vec2","PlayerController","ccclass","property","GameState","BlockType","BlockSizeX","BlockSizeY","GameManger","type","roadHeight","feacherCount","_road","start","setCurState","GS_INIT","node","on","updateScore","curScore","Score","getComponent","string","toString","oneTotwo","startButton1","active","startMenu1","startMenu2","startExit","startStart","startSettings","twoTogame","startGame","init","gameGround1","instance","enable","generateRoad","player","playerCtrl","initInput","value","GS_PLAYING","GS_END","endGame1","_isJump","_isMove","Body","gravityScale","linearVelocity","curChildren","children","cur","setScale","playerRigid","body","enabledContactListener","scoreAnim","play","onContactFeather","selfCollider","otherCollider","contact","block","blockAnimation","Bounce","emit","setTimeout","onContactFire","removeAllChildren","i","_roadCur","j","roadLength","Math","floor","random","spawnBlockByType","curNode","addChild","collider","BEGIN_CONTACT","setPosition","fireAnimation","BT_STONE","boxPrefab","BT_FIRE","firePrefab","BT_FEATHER","featherPrefab","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Vec3, EventMouse, input, Input, Animation, Node, Prefab, CCInteger, instantiate, PhysicsSystem2D, Collider2D, Contact2DType, IPhysics2DContact, animation, AnimationState, Label, RigidBody2D, Vec2 } from 'cc';\r\nimport { PlayerController } from './PlayerController';\r\nconst { ccclass, property } = _decorator;\r\n\r\nenum GameState {\r\n    GS_INIT,\r\n    GS_PLAYING,\r\n    GS_END,\r\n};\r\n\r\nenum BlockType {\r\n    BT_NONE,\r\n    BT_STONE,\r\n    BT_FIRE,\r\n    BT_FEATHER,\r\n};\r\nconst BlockSizeX = 75;\r\nconst BlockSizeY = 75;\r\n@ccclass('GameManger')\r\nexport class GameManger extends Component {\r\n    @property({ type: Node })\r\n    startButton1: Node = null;//从第一个开始界面调到第二个界面的按钮\r\n    @property({ type: Node })\r\n    startMenu1: Node = null;//第一个背景\r\n    @property({ type: Node })\r\n    startMenu2: Node = null;\r\n    @property({ type: Node })\r\n    startSettings: Node = null;\r\n    @property({ type: Node })\r\n    startStart: Node = null;\r\n    @property({ type: Node })\r\n    startExit: Node = null;\r\n    @property({ type: Node })\r\n    gameGround1: Node = null;\r\n    @property({ type: Node })\r\n    gameGround2: Node = null;\r\n    @property({ type: Node })\r\n    player: Node = null;\r\n    @property({ type: Node })\r\n    Score: Node = null;\r\n    @property({ type: Prefab })\r\n    public boxPrefab: Prefab | null = null;\r\n    @property({ type: Prefab })\r\n    public featherPrefab: Prefab | null = null;\r\n    @property({ type: Prefab })\r\n    public firePrefab: Prefab | null = null;\r\n    @property({ type: CCInteger })\r\n    public roadLength: number = 20;\r\n    public roadHeight: number = 20;\r\n    public feacherCount: number = 0;\r\n    private _road = [];\r\n\r\n    @property({ type: PlayerController })\r\n    public playerCtrl: PlayerController | null = null;\r\n\r\n    start() {\r\n        this.setCurState(GameState.GS_INIT);\r\n        this.node.on('GetScore', this.updateScore, this)\r\n    }\r\n    updateScore(curScore: number) {\r\n        this.Score.getComponent(Label).string = curScore.toString();\r\n    }\r\n    oneTotwo() {\r\n        this.startButton1.active = false;\r\n        this.startMenu1.active = false;\r\n        this.startMenu2.active = true;\r\n        this.startExit.active = true;\r\n        this.startStart.active = true;\r\n        this.startSettings.active = true;\r\n    }\r\n    twoTogame() {\r\n        this.startGame();\r\n    }\r\n    init() {\r\n    }\r\n    startGame() {\r\n        this.startMenu2.active = false;\r\n        this.startExit.active = false;\r\n        this.startStart.active = false;\r\n        this.startSettings.active = false;\r\n        this.gameGround1.active = true;\r\n        PhysicsSystem2D.instance.enable = true;\r\n        this.generateRoad();\r\n        this.feacherCount = 0;\r\n        this.player.active = true;\r\n        this.playerCtrl.initInput(true);\r\n    }\r\n    setCurState(value: GameState) {\r\n        switch (value) {\r\n            case GameState.GS_INIT:\r\n                this.init();\r\n                break;\r\n            case GameState.GS_PLAYING:\r\n                this.startGame();\r\n                break;\r\n            case GameState.GS_END:\r\n                this.endGame1();\r\n                break;\r\n        }\r\n    }\r\n    endGame1() {\r\n        this.playerCtrl.initInput(false);\r\n        this.playerCtrl._isJump = false;\r\n        this.playerCtrl._isMove = false;\r\n        this.playerCtrl.Body.gravityScale = 0;\r\n        this.playerCtrl.Body.linearVelocity = new Vec2(0, 0);\r\n        let curChildren = this.node.children;\r\n        for (let cur of curChildren) {\r\n            cur.setScale(0, 0);\r\n        }\r\n        let playerRigid = this.player.getComponent(Collider2D);\r\n        if (playerRigid) {\r\n            playerRigid.body.enabledContactListener = false;\r\n        }\r\n        let scoreAnim = this.Score.getComponent(Animation);\r\n        if (scoreAnim) {\r\n            scoreAnim.play('score_bigger');\r\n        }\r\n        this.player.active = false;\r\n    }\r\n    onContactFeather(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        let block = selfCollider.node;\r\n        let blockAnimation = block.getComponent(Animation);\r\n        blockAnimation.play('feather_fly');\r\n        this.playerCtrl.Bounce(20);\r\n        selfCollider.body.enabledContactListener = false;\r\n        this.feacherCount++;\r\n        this.node.emit('GetScore', this.feacherCount);\r\n        // let blockAnimationState = blockAnimation.getState('feather_fly');\r\n        setTimeout(() => {\r\n            block.active = false;\r\n        }, 2000);\r\n    }\r\n    onContactFire(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        selfCollider.body.enabledContactListener = false;\r\n        this.setCurState(GameState.GS_END);\r\n    }\r\n    //生成地块\r\n    generateRoad() {\r\n        this.node.removeAllChildren();\r\n        this._road = [];\r\n        for (let i = 1; i <= this.roadHeight; i++) {\r\n            let _roadCur: BlockType[] = [];\r\n            for (let j = 1; j <= this.roadLength; j++) {\r\n                if ((i % 2 == 1)) {\r\n                    _roadCur[j] = Math.floor(Math.random() * 4);\r\n                }\r\n                else {\r\n                    _roadCur[j] = 0;\r\n                }\r\n            }\r\n            this._road[i] = _roadCur;\r\n        }\r\n        for (let i = 1; i <= this.roadHeight; i++) {\r\n            for (let j = 1; j <= this.roadLength; j++) {\r\n                let block: Node | null = this.spawnBlockByType(this._road[i][j]);\r\n                if (j - 1 != 0) {\r\n                    if (block) {\r\n                        if (this._road[i][j] == 3) {\r\n                            let curNode = new Node;\r\n                            curNode.addChild(block);\r\n                            this.node.addChild(curNode);\r\n                            block.setScale(1, -1);\r\n                            let collider = block.getComponent(Collider2D);\r\n                            if (collider) {\r\n                                collider.on(Contact2DType.BEGIN_CONTACT, this.onContactFeather, this);\r\n                            }\r\n                            curNode.setPosition((j - 1) * BlockSizeY, (i - 10) * BlockSizeX, 0);\r\n                            continue;\r\n                        }\r\n                        this.node.addChild(block);\r\n                        if (this._road[i][j] == 2) {\r\n                            let fireAnimation = block.getComponent(Animation);\r\n                            if (fireAnimation) {\r\n                                fireAnimation.play('fire1');\r\n                            }\r\n                            let collider = block.getComponent(Collider2D);\r\n                            if (collider) {\r\n                                collider.on(Contact2DType.BEGIN_CONTACT, this.onContactFire, this);\r\n                            }\r\n                        }\r\n                        block.setPosition((j - 1) * BlockSizeY, (i - 10) * BlockSizeX, 0);\r\n                    }\r\n                } else if (i - 10 == -1) {\r\n                    block = this.spawnBlockByType(BlockType.BT_STONE);\r\n                    this.node.addChild(block);\r\n                    block.setPosition((j - 1) * BlockSizeY, (i - 10) * BlockSizeX, 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    spawnBlockByType(type: BlockType) {\r\n        if (!this.boxPrefab) {\r\n            return null;\r\n        }\r\n        let block: Node | null = null;\r\n        switch (type) {\r\n            case BlockType.BT_STONE:\r\n                block = instantiate(this.boxPrefab);\r\n                break;\r\n            case BlockType.BT_FIRE:\r\n                block = instantiate(this.firePrefab);\r\n                break;\r\n            case BlockType.BT_FEATHER:\r\n                block = instantiate(this.featherPrefab);\r\n                break;\r\n        }\r\n        return block;\r\n    }\r\n    update(deltaTime: number) {\r\n\r\n    }\r\n}\r\n"]}